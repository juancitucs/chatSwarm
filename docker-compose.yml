version: "3.8"

networks:
  chat-net:
    driver: overlay

services:
  rethinkdb-master:
    image: rethinkdb
    ports:
      - "28015:28015"
      - "8080:8080"
    networks:
      - chat-net
    volumes:
      - rethinkdb-master-data:/data
    deploy:
      replicas: 1
      restart_policy:
        condition: on-failure

  rethinkdb-replica:
    image: rethinkdb
    command: rethinkdb --bind all --join rethinkdb-master:29015
    networks:
      - chat-net
    volumes:
      - rethinkdb-replica-data:/data
    deploy:
      replicas: 1
      restart_policy:
        condition: on-failure

  minio:
    image: minio/minio
    command: server /data --console-address ":9001"
    ports:
      - "9000:9000"
      - "9001:9001"
    environment:
      MINIO_ROOT_USER: minioadmin
      MINIO_ROOT_PASSWORD: minioadmin
    volumes:
      - minio-data:/data
    networks:
      - chat-net
    deploy:
      replicas: 1
      restart_policy:
        condition: on-failure

  api:
    image: chat-api:latest # Ya debe estar construida con docker build
    ports:
      - "8000:8000"
    environment:
      RDB_HOST: rethinkdb-master
      RDB_PORT: 28015
      MINIO_ENDPOINT: http://minio:9000
      MINIO_ACCESS_KEY: minioadmin
      MINIO_SECRET_KEY: minioadmin
      JWT_SECRET: super_secreto
    depends_on:
      - rethinkdb-master
      - rethinkdb-replica
      - minio
    networks:
      - chat-net
    deploy:
      replicas: 2 # Scale to 2 API instances
      restart_policy:
        condition: on-failure

  caddy:
    image: caddy:2
    ports:
      - "80:80"
    volumes:
      - ./caddy/Caddyfile:/etc/caddy/Caddyfile
    depends_on:
      - api
    networks:
      - chat-net
    deploy:
      replicas: 1 # Caddy as a single entry point
      restart_policy:
        condition: on-failure

volumes:
  minio-data:
  rethinkdb-master-data:
  rethinkdb-replica-data: